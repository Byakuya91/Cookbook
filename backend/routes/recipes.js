const express = require("express");
const router = express.Router();
const multer = require("multer");
const { User } = require("../models/user");
const { Recipe, validateRecipe } = require("../models/recipe");
const fileUpload = require("../middleware/file_upload");
const { Ingredient, validateIngredient } = require("../models/ingredients");
const auth = require("../middleware/auth");
const { Mongoose } = require("mongoose");
const e = require("express");

//  TODO: CRUD functionality for Recipes

//  POST a new recipe to users(COMPLETE)
// http://localhost:5000/api/recipes/62868c2bd071a220048e113d/recipes
router.post(
  "/:userId/recipes",
  [auth, fileUpload.single("image")],
  async (req, res) => {
    try {
      //  find a user's id
      const user = await User.findById(req.params.userId);
      // console.log("the user is", user);
      console.log(req.body);
      // check if there is no user id
      if (!user)
        return res
          .status(400)
          .send(`User with id ${req.params.userId} does not exist!`);
      // create a recipe to be added.
      console.log(req.body.name);

      //map through req.body.ingredients and Jsonparse each index to an ingredient object
      //use new array (result of map) in the newRecipe down below

      let converted_Ingredients = req.body.ingredients.map(
        (ingredient) => new Ingredient(JSON.parse(ingredient))
      );

      console.log(converted_Ingredients);

      let recipe = new Recipe({
        // recipe fields
        author: user,
        // 'user' is getting the id from MongoDB when generated by the user
        name: req.body.name,
        ingredients: converted_Ingredients,
        preparation_time: req.body.preparation_time,
        serving_size: req.body.serving_size,
        cook_time: req.body.cook_time,
        yield: req.body.yield,
        image: req.file.path,
        directions: req.body.directions,
        calories: req.body.calories,
        favorite: req.body.favorite,
      });

      // console.log(recipe);

      //add recipe body data to the user
      user.recipes.push(recipe);
      const token = user.generateAuthToken();
      await user.save();
      // console.log(user.recipes);
      return res
        .header("x-auth-token", token)
        .header("access-control-expose-headers", "x-auth-token")
        .send(user.recipes);
    } catch (error) {
      console.log(error);
      return res.status(500).send(`Internal Server Error: ${error}`);
    }
  }
);

// PUT request to update the recipe inside of a user(COMPLETE)
// http://localhost:5000/api/recipes/:userId/recipes/:recipeId
router.put(
  "/:userId/recipes/:recipeId",
  [auth, fileUpload.single("image")],
  async (req, res) => {
    try {
      // validate for the recipe
      let { error } = validateRecipe(req.body);
      // if there is no recipe id
      if (error) {
        return res.status(400).send(`Recipe body is not valid ${error}`);
      }
      //  find a user's id
      const user = await User.findById(req.params.userId);
      console.log("the user ID is: ", user);
      // check if there is no user id
      if (!user)
        return res
          .status(400)
          .send(`User with id ${req.params.userId} does not exist!`);
      // check if recipe exists inside a user's subdocument
      const recipe = user.recipes.id(req.params.recipeId);
      console.log("The recipe ID is: ", recipe);
      if (!recipe) {
        return res
          .status(400)
          .send(`The recipe does not exist inside the recipes!`);
      }
      console.log(req.body);
      let converted_Ingredients = req.body.ingredients.map(
        (ingredient) => new Ingredient(JSON.parse(ingredient))
      );
      // Update the recipe fields
      recipe.name = req.body.name;
      recipe.ingredients = converted_Ingredients;
      recipe.preparation_time = req.body.preparation_time;
      recipe.serving_size = req.body.serving_size;
      recipe.cook_time = req.body.cook_time;
      recipe.calories = req.body.calories;
      recipe.yield = req.body.yield;
      recipe.directions = req.body.directions;
      recipe.author = req.body.author;

      // save the changes
      //console.log("the user   is:", user.recipes);
      const token = user.generateAuthToken();
      await user.save();
      // sends back updated recipe
      return res
        .header("x-auth-token", token)
        .header("access-control-expose-headers", "x-auth-token")
        .send(user);
    } catch (error) {
      console.log(error);
      return res.status(500).send(`Internal Server Error: ${error}`);
    }
  }
);

//  DELETE a recipe from a user (COMPLETE)
// http://localhost:5000/api/recipes/:userId/recipes/:recipeId
router.delete("/:userId/recipes/:recipeId", async (req, res) => {
  try {
    //  find a user's id
    const user = await User.findById(req.params.userId);
    // check if there is no user id
    if (!user)
      return res
        .status(400)
        .send(`User with id ${req.params.userId} does not exist!`);

    // find the recipe inside the user
    let recipe = user.recipes.id(req.params.recipeId);
    // if there is no recipe inside the user
    if (!recipe) {
      return res
        .status(400)
        .send(`The recipe does not exist inside the recipes!`);
    }
    // removes the recipe from the user
    recipe = await recipe.remove();
    await user.save();
    //  sends a response back with the removed recipe.
    return res.send(recipe);
  } catch (error) {
    return res.status(500).send(`Internal Server Error: ${error}`);
  }
});

// Create a Route to upload the image to the recipe user.

//  Only for images PUT request
// http://localhost:5000/api/recipes/:userId/recipes/:recipeId/updateRecipeImage
router.put(
  "/:userId/recipes/:recipeId/updateRecipeImage",
  [auth, fileUpload.single("image")],
  async (req, res) => {
    try {
      // find a user by their id
      let user = await User.findById(req.params.userId);
      if (!user)
        return res
          .status(400)
          .send(`User with ObjectId ${req.params.userId} does not exist.`);

      let recipe;
      user.recipes.forEach((foundRecipe) => {
        if (foundRecipe["_id"] == req.params.recipeId) {
          recipe = foundRecipe;
        }
      });
      console.log(req.params.recipeId);

      // console.log(" the recipe value on line 135 is", recipe);
      // check if there was no recipe ID
      if (!recipe)
        return res
          .status(400)
          .send(`User with ObjectId ${req.params.recipeId} does not exist.`);
      //  Update the photo of the recipe ID
      recipe.image = req.file.path;
      console.log(req.file.path);
      // recipe.image.push(req.file.path);

      // console.log("the recipe image path is", recipe.image);

      await user.save();
      const token = user.generateAuthToken();

      return res
        .status(200)
        .header("x-auth-token", token)
        .header("access-control-expose-headers", "x-auth-token")
        .send(user);
    } catch (ex) {
      return res.status(500).send(`Internal Server Error: ${ex}`);
    }
  }
);
// PATCH request, toggle between favorites being "true" or "false"
// http://localhost:5000/api/recipes/:userId/recipes/:recipeId
router.patch("/:userId/favoriteRecipes/:recipeId", async (req, res) => {
  try {
    // validate for the recipe
    let { error } = validateRecipe(req.body);
    // if there is no recipe id
    if (error) {
      return res.status(400).send(`Recipe body is not valid ${error}`);
    }
    //  find a user's id
    const user = await User.findById(req.params.userId);

    console.log(" the user id is: ", req.params.userId);
    // check if there is no user id
    if (!user)
      return res
        .status(400)
        .send(`User with id ${req.params.userId} does not exist!`);
    // check if recipe exists inside a user's subdocument
    let recipe = user.recipes.find((el) => el._id == req.params.recipeId);

    // recipe = Mongoose.Types.ObjectId(recipe);

    console.log(" the recipe id is: ", req.params.recipeId);
    if (!recipe) {
      return res
        .status(400)
        .send(
          `The recipe id ${req.params.recipeId} does not exist inside the recipes!`
        );
    }
    // Update the recipe fields
    recipe.favorite = !recipe.favorite;
    // console.log("the favorites is:", recipe.favorite);
    // save the changes
    await user.save();
    // sends back updated recipe
    return res.send(user);
  } catch (error) {
    return res.status(500).send(`Internal Server Error: ${error}`);
  }
});

// PATCH REQUESTS to update individual recipe fields.

router.patch("/:userId/updateRecipe/:recipeId", async (req, res) => {
  try {
    // validate for the recipe
    let { error } = validateRecipe(req.body);
    // if there is no recipe id
    if (error) {
      return res.status(400).send(`Recipe body is not valid ${error}`);
    }
    //  find a user's id
    const user = await User.findById(req.params.userId);

    console.log(" the user id is: ", req.params.userId);
    // check if there is no user id
    if (!user)
      return res
        .status(400)
        .send(`User with id ${req.params.userId} does not exist!`);
    // check if recipe exists inside a user's subdocument
    let recipe = user.recipes.find((el) => el._id == req.params.recipeId);

    console.log(" the recipe id is: ", req.params.recipeId);
    if (!recipe) {
      return res
        .status(400)
        .send(
          `The recipe id ${req.params.recipeId} does not exist inside the recipes!`
        );
    }
    // Update the recipes fields,minus photos due to another route.
    recipe.name = req.body.name;
    recipe.ingredients = req.body.ingredients;
    recipe.preparation_time = req.body.preparation_time;
    recipe.serving_size = req.body.serving_size;
    recipe.cook_time = req.body.cook_time;
    recipe.calories = req.body.calories;
    recipe.yield = req.body.yield;
    recipe.directions = req.body.directions;

    console.log("the recipe name is  is:", recipe.name);
    // save the changes
    await user.save();
    // sends back updated recipe
    return res.send(user);
  } catch (error) {
    return res.status(500).send(`Internal Server Error: ${error}`);
  }
});

module.exports = router;
